name: Build and Release

on:
  push:
    tags:
      - '*v*'
  workflow_dispatch:

jobs:
  build-windows:
    runs-on: Windows
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-gui.txt
        pip install pyinstaller

    - name: Download embedded tools
      run: |
        New-Item -ItemType Directory -Force -Path bin
        # Download yt-dlp
        Invoke-WebRequest -Uri "https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp.exe" -OutFile "bin/yt-dlp.exe"
        # Download mpv
        Invoke-WebRequest -Uri "https://master.dl.sourceforge.net/project/mpv-player-windows/64bit/mpv-x86_64-20231231-git-abc2a74.7z" -OutFile "mpv.7z"
        & "C:\Program Files\7-Zip\7z.exe" x mpv.7z -obin -y
        Move-Item "bin/mpv.exe" "bin/mpv.exe"
        # Download aria2c
        Invoke-WebRequest -Uri "https://github.com/aria2/aria2/releases/download/release-1.37.0/aria2-1.37.0-win-64bit-build1.zip" -OutFile "aria2.zip"
        Expand-Archive aria2.zip -DestinationPath .
        Move-Item "aria2-1.37.0-win-64bit-build1/aria2c.exe" "bin/aria2c.exe"

    - name: Build Windows executable
      run: |
        pyinstaller pyinstaller.spec --name turkanime-gui-windows

    - name: Upload Windows build
      uses: actions/upload-artifact@v4
      with:
        name: turkanime-gui-windows
        path: dist/turkanime-gui-windows.exe

  build-linux:
    runs-on: Linux
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libgtk-3-dev libgirepository1.0-dev p7zip-full

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-gui.txt
        pip install pyinstaller

    - name: Download embedded tools
      run: |
        mkdir -p bin
        # Download yt-dlp
        wget -O bin/yt-dlp https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp
        chmod +x bin/yt-dlp
        # Download mpv
        wget -O mpv.tar.xz https://github.com/mpv-player/mpv/releases/download/v0.37.0/mpv-0.37.0-x86_64-static.tar.xz
        tar -xf mpv.tar.xz
        cp mpv-0.37.0-x86_64-static/mpv bin/mpv
        chmod +x bin/mpv
        # Download aria2c
        wget -O aria2.tar.xz https://github.com/aria2/aria2/releases/download/release-1.37.0/aria2-1.37.0-linux-gnu-64bit-build1.tar.xz
        tar -xf aria2.tar.xz
        cp aria2-1.37.0-linux-gnu-64bit-build1/aria2c bin/aria2c
        chmod +x bin/aria2c

    - name: Build Linux executable
      run: |
        pyinstaller pyinstaller.spec --name turkanime-gui-linux

  build-macos:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-gui.txt
        pip install pyinstaller

    - name: Download embedded tools
      run: |
        mkdir -p bin
        # Download yt-dlp
        curl -L -o bin/yt-dlp https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp
        chmod +x bin/yt-dlp
        # Download mpv
        curl -L -o mpv.tar.xz https://github.com/mpv-player/mpv/releases/download/v0.37.0/mpv-0.37.0-macos-12-x86_64.tar.xz
        tar -xf mpv.tar.xz
        cp mpv-0.37.0-macos-12-x86_64/mpv bin/mpv
        chmod +x bin/mpv
        # Download aria2c
        curl -L -o aria2.tar.xz https://github.com/aria2/aria2/releases/download/release-1.37.0/aria2-1.37.0-osx-darwin.tar.xz
        tar -xf aria2.tar.xz
        cp aria2-1.37.0-osx-darwin/aria2c bin/aria2c
        chmod +x bin/aria2c

    - name: Build macOS executable
      run: |
        pyinstaller pyinstaller.spec --name turkanime-gui-macos

    - name: Upload macOS build
      uses: actions/upload-artifact@v4
      with:
        name: turkanime-gui-macos
        path: dist/turkanime-gui-macos

  create-release:
    needs: [build-windows, build-linux, build-macos]
    runs-on: Linux
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Create version.json
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        cat > version.json << EOF
        {
          "version": "$VERSION",
          "release_date": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
          "platforms": {
            "windows": {
              "url": "https://github.com/${{ github.repository }}/releases/download/v$VERSION/turkanime-gui-windows.exe",
              "checksum": "$(sha256sum turkanime-gui-windows/turkanime-gui-windows.exe | cut -d' ' -f1)"
            },
            "linux": {
              "url": "https://github.com/${{ github.repository }}/releases/download/v$VERSION/turkanime-gui-linux",
              "checksum": "$(sha256sum turkanime-gui-linux/turkanime-gui-linux | cut -d' ' -f1)"
            },
            "macos": {
              "url": "https://github.com/${{ github.repository }}/releases/download/v$VERSION/turkanime-gui-macos",
              "checksum": "$(sha256sum turkanime-gui-macos/turkanime-gui-macos | cut -d' ' -f1)"
            }
          },
          "changelog": "Güncelleme bilgileri için GitHub release notlarını inceleyin."
        }
        EOF

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          turkanime-gui-windows/turkanime-gui-windows.exe
          turkanime-gui-linux/turkanime-gui-linux
          turkanime-gui-macos/turkanime-gui-macos
          version.json
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
