name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Install 7-Zip (Windows)
        run: |
          choco install 7zip -y

      - name: Download yt-dlp (Windows)
        run: |
          Invoke-WebRequest -Uri "https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp.exe" -OutFile "bin\yt-dlp.exe"

      - name: Download aria2c (Windows)
        run: |
          Invoke-WebRequest -Uri "https://github.com/aria2/aria2/releases/download/release-1.37.0/aria2-1.37.0-win-64bit-build1.zip" -OutFile "aria2.zip"
          Expand-Archive -Path "aria2.zip" -DestinationPath "aria2_temp"
          Copy-Item "aria2_temp\aria2-1.37.0-win-64bit-build1\aria2c.exe" -Destination "bin\aria2c.exe"
          Remove-Item "aria2.zip" -Force
          Remove-Item "aria2_temp" -Recurse -Force

      - name: Download mpv (Windows)
        run: |
          Invoke-WebRequest -Uri "https://github.com/shinchiro/mpv-winbuild-cmake/releases/download/20250827/mpv-x86_64-20250827-git-9f153e2.7z" -OutFile "mpv.7z"
          & "C:\Program Files\7-Zip\7z.exe" x "mpv.7z" -o"mpv_temp" -y
          Copy-Item "mpv_temp\mpv.exe" -Destination "bin\mpv.exe"
          Remove-Item "mpv.7z" -Force
          Remove-Item "mpv_temp" -Recurse -Force

      - name: Download ffmpeg (Windows)
        run: |
          Invoke-WebRequest -Uri "https://www.gyan.dev/ffmpeg/builds/ffmpeg-release-essentials.zip" -OutFile "ffmpeg.zip"
          Expand-Archive -Path "ffmpeg.zip" -DestinationPath "ffmpeg_temp"
          $ffmpegDir = Get-ChildItem "ffmpeg_temp" -Directory | Select-Object -First 1
          Copy-Item "$ffmpegDir\bin\ffmpeg.exe" -Destination "bin\ffmpeg.exe"
          Remove-Item "ffmpeg.zip" -Force
          Remove-Item "ffmpeg_temp" -Recurse -Force

      - name: Build executable
        run: pyinstaller --clean --noconfirm turkanime-gui.spec

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: turkanime-windows
          path: dist/

  build-linux:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Create bin directory
        run: mkdir -p bin

      - name: Download yt-dlp (Linux)
        run: |
          wget -O bin/yt-dlp https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp
          chmod +x bin/yt-dlp

      - name: Download aria2c (Linux)
        run: |
          wget -O bin/aria2c https://github.com/q3aql/aria2-static-builds/releases/download/v1.37.0/aria2-1.37.0-linux-gnu-64bit-build1
          chmod +x bin/aria2c

      - name: Download mpv (Linux)
        run: |
          wget -O bin/mpv https://github.com/mpv-player/mpv-build/releases/download/0.36.0/mpv-0.36.0-x86_64-static
          chmod +x bin/mpv

      - name: Download ffmpeg (Linux)
        run: |
          wget -O ffmpeg.tar.xz https://johnvansickle.com/ffmpeg/releases/ffmpeg-release-amd64-static.tar.xz
          tar -xf ffmpeg.tar.xz
          cp ffmpeg-*-amd64-static/ffmpeg bin/ffmpeg
          chmod +x bin/ffmpeg
          rm -rf ffmpeg.tar.xz ffmpeg-*-amd64-static

      - name: Build executable
        run: pyinstaller --clean --noconfirm turkanime-gui.spec

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: turkanime-linux
          path: dist/

  build-macos:
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Create bin directory
        run: mkdir -p bin

      - name: Download yt-dlp (macOS)
        run: |
          curl -L -o bin/yt-dlp https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp_macos
          chmod +x bin/yt-dlp

      - name: Download aria2c (macOS)
        run: |
          curl -L -o bin/aria2c https://github.com/aria2/aria2/releases/download/release-1.37.0/aria2-1.37.0-osx-darwin.tar.bz2
          tar -xjf aria2-1.37.0-osx-darwin.tar.bz2
          cp aria2-1.37.0-osx-darwin/bin/aria2c bin/aria2c
          chmod +x bin/aria2c
          rm -rf aria2-1.37.0-osx-darwin* aria2-1.37.0-osx-darwin.tar.bz2

      - name: Download mpv (macOS)
        run: |
          curl -L -o bin/mpv https://github.com/mpv-player/mpv-build/releases/download/0.36.0/mpv-0.36.0-macos-universal
          chmod +x bin/mpv

      - name: Download ffmpeg (macOS)
        run: |
          curl -L -o ffmpeg.zip https://evermeet.cx/ffmpeg/ffmpeg-7.0.1.zip
          unzip ffmpeg.zip
          mv ffmpeg bin/ffmpeg
          chmod +x bin/ffmpeg
          rm -f ffmpeg.zip

      - name: Build executable
        run: pyinstaller --clean --noconfirm turkanime-gui.spec

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: turkanime-macos
          path: dist/

  release:
    needs: [build-windows, build-linux, build-macos]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Create release
        uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false

      - name: Find Windows executable
        id: find_windows
        run: |
          FILE=$(find artifacts/turkanime-windows -type f -name '*.exe' -print -quit)
          if [ -z "$FILE" ]; then
            echo "No Windows executable found in artifacts/turkanime-windows"
            exit 1
          fi
          echo "path=$FILE" >> $GITHUB_OUTPUT

      - name: Upload Windows executable
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.find_windows.outputs.path }}
          asset_name: turkanime-windows.exe
          asset_content_type: application/octet-stream

      - name: Find Linux executable
        id: find_linux
        run: |
          FILE=$(find artifacts/turkanime-linux -type f -print -quit)
          if [ -z "$FILE" ]; then
            echo "No Linux executable found in artifacts/turkanime-linux"
            exit 1
          fi
          echo "path=$FILE" >> $GITHUB_OUTPUT

      - name: Upload Linux executable
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.find_linux.outputs.path }}
          asset_name: turkanime-linux
          asset_content_type: application/octet-stream

      - name: Find macOS executable
        id: find_macos
        run: |
          FILE=$(find artifacts/turkanime-macos -type f -print -quit)
          if [ -z "$FILE" ]; then
            echo "No macOS executable found in artifacts/turkanime-macos"
            exit 1
          fi
          echo "path=$FILE" >> $GITHUB_OUTPUT

      - name: Upload macOS executable
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.find_macos.outputs.path }}
          asset_name: turkanime-macos
          asset_content_type: application/octet-stream
